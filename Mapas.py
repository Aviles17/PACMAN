import turtle
import numpy as np

def GenerarMapa(opcion, AI):
    if(opcion == 'B'):
        #Mapa Basico (Cuadrado)
        map = np.array([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]])
    if(opcion == 'C'):
        #Mapa Complejo (En progreso)
        map = np.array([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,2],
                        [2,0,2,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,2],
                        [2,0,2,0,0,0,1,1,1,0,0,1,1,2,0,2,0,1,1,2],
                        [2,0,2,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,2],
                        [2,0,2,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,2],
                        [2,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2],
                        [2,0,2,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,2],
                        [2,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2],
                        [2,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,2],
                        [2,0,2,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,2],
                        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2],
                        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2],
                        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2,1,0,2],
                        [2,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,0,2],
                        [2,0,2,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]])
    if(opcion == 'E'):
        map = np.array([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2],
                        [2,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,2,0,2,1,1,1,1,1,1,1,1,1,1,0,0,0,2],
                        [2,0,0,2,0,2,0,0,2,0,0,0,2,0,0,0,0,0,0,2],
                        [2,0,0,2,0,2,0,0,2,0,0,0,2,0,0,0,0,0,0,2],
                        [2,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,1,0,0,0,2,0,0,0,0,0,1,1,1,1,1,1,1,1,2],
                        [2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
                        [2,1,0,0,0,2,1,1,1,1,1,1,0,0,2,0,0,0,0,2],
                        [2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]])
    lines = []
    InicialX = -270
    InicialY = 280
    for i in range(20):
        for j in range(20):
            if(map[i][j] == 1): #Generar lineas horizontales
                Limit = turtle.Turtle()
                Limit.speed(0)
                Limit.shape("square")
                Limit.color('blue')
                Limit.penup()
                Limit.goto(InicialX + 28*(j),InicialY)
                Limit.pendown()
                Limit.shapesize(stretch_len= 2.3, stretch_wid= 0.5)
                lines.append(Limit)
            if(map[i][j] == 2): #Generar lineas verticales
                Limit = turtle.Turtle()
                Limit.speed(0)
                Limit.shape("square")
                Limit.color('blue')
                Limit.penup()
                Limit.goto(InicialX + 28*(j),InicialY)
                Limit.pendown()
                Limit.shapesize(stretch_len= 0.5, stretch_wid= 2.3)
                lines.append(Limit)    
        InicialY -= 28 #Pasar a la siguiente linea 
    
    #llamar a generar comida con relacion al mapa
    if(AI == True):
        GenerarGrafo(map)
        
    return lines
'''
########################################################################################################################################
Rutina para generar el grafo dirigido
########################################################################################################################################
'''
def GenerarGrafo(map):
    Mat_Grafo = np.empty((20,20),int)
    Nodo = 0 # Inicializar el contador de nodos
    for i in range(20):
        for j in range(20):
            if(map[i][j] == 0):
                if(map[i-1][j] != 0 or map[i+1][j] != 0):
                    if(map[i][j-1] != 0 or map[i][j+1] != 0):
                        Mat_Grafo[i][j] = Nodo
                        Nodo += 1
            else:
                Mat_Grafo[i][j] = -1
                  
    print(Mat_Grafo)

